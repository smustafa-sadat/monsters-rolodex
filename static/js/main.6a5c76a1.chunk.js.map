{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,kBAAO,SAAAC,GAAK,OACvB,sBAAKC,UAAY,iBAAjB,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCFTC,EAAW,SAACR,GAEvB,OACE,qBAAKC,UAAY,WAAjB,SACGD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UCL3CO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACvB,uBACEZ,UAAY,SACZa,KAAK,SACLC,YAAeH,EACfI,SAAYH,MCwBDI,E,kDA3Bb,aAAc,IAAD,8BACX,gBAWFJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAXrC,EAAKC,MAAQ,CACXd,SAAW,GACXW,YAAa,IAJJ,E,gEAOO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAWmB,S,+BAKlC,IAAD,EACwBC,KAAKN,MAA7Bd,EADA,EACAA,SAASW,EADT,EACSA,YACTU,EAAmBrB,EAASsB,QAAO,SAAA5B,GAAO,OAAIA,EAAQG,KAAK0B,cAAcC,SAASb,EAAYY,kBACpG,OACE,sBAAK/B,UAAY,MAAjB,UACE,kDACA,cAAC,EAAD,CAAWW,YAAc,kBAAkBC,aAAgBgB,KAAKhB,eAChE,cAAC,EAAD,CAAUJ,SAAYqB,W,GAvBZI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OAAO,cAAC,IAAMC,WAAP,UAAkB,cAAC,EAAD,MAA0BC,SAASC,eAAe,SAKpFZ,M","file":"static/js/main.6a5c76a1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nexport const Card = props =>(\r\n  <div className = 'card-container'>\r\n    <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n)","import React from 'react'\r\nimport './card-list.style.css';\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = (props) =>{\r\n  // console.log(props);\r\n  return(\r\n    <div className = 'cardList'>\r\n      {props.monsters.map(monster => <Card key={monster.id} monster = {monster}/>)}\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeHolder,handleChange}) => (\r\n  <input\r\n    className = 'search'\r\n    type=\"search\"\r\n    placeholder = {placeHolder}\r\n    onChange = {handleChange}\r\n  />\r\n)\r\n","import React, {Component}from 'react'\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters : [],\n      searchField: ''\n    }  \n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => this.setState({monsters : users}));\n  }\n  handleChange = (e)=>{\n    this.setState({searchField: e.target.value})\n  }\n  render(){\n    const{monsters,searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return(\n      <div className = 'App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeHolder = 'Seacrh Monsters' handleChange = {this.handleChange}/>\n        <CardList monsters = {filteredMonsters}></CardList>\n      </div>\n    )\n  }\n}\nexport default App; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(<React.StrictMode><App/></React.StrictMode>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}